(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.translateContract = translateContract;
exports.Contract = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @author Noah-Vincenz Noeh <noah-vincenz.noeh18@imperial.ac.uk>
 */

/* jshint esversion: 6 */
var Contract = function Contract(id, amount, recipient, contractString, meaningOfContractString, horizonDate, toBeExecutedAtHorizon, status) {
  _classCallCheck(this, Contract);

  this.id = id;
  this.amount = amount;
  this.recipient = recipient;
  this.contractString = contractString;
  this.meaningOfContractString = meaningOfContractString;
  this.horizonDate = horizonDate;
  this.toBeExecutedAtHorizon = toBeExecutedAtHorizon;
  this.status = status;
};

exports.Contract = Contract;

function translateContract(recipient, amount, horizonDate, acquireAtHorizon) {
  var to = " owner ";
  var from = " counter-party ";
  var hDate = "";

  if (recipient === 1) {
    to = " counter-party ";
    from = " owner ";
  }

  if (horizonDate !== "infinite") {
    if (acquireAtHorizon === "yes") {
      hDate = " at " + horizonDate;
    } else {
      hDate = " before " + horizonDate;
    }
  }

  var adj = " is";

  if (parseFloat(amount) !== 1) {
    if (parseFloat(amount) === 0) {
      adj = " are";
    } else {
      adj = "s are";
    }
  }

  return amount + " Ether" + adj + " transferred from the " + from + " address to the " + to + " address" + hDate + ".";
}

},{}],2:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getSelectedMetaMaskAccount = getSelectedMetaMaskAccount;
exports.setDefaultAccount = setDefaultAccount;
exports.setSmartContractInstance = setSmartContractInstance;
exports.instantiateNew = instantiateNew;
exports.depositCollateral = depositCollateral;
exports.holderBalance = holderBalance;
exports.counterPartyBalance = counterPartyBalance;
exports.holderAddress = holderAddress;
exports.counterPartyAddress = counterPartyAddress;
exports.balanceOfAddress = balanceOfAddress;
exports.watchTransferEvent = watchTransferEvent;
exports.transfer = transfer;
exports.waitForReceipt = waitForReceipt;

var _resources = require("./resources.mjs");

/**
 * @author Noah-Vincenz Noeh <noah-vincenz.noeh18@imperial.ac.uk>
 */

/* jshint esversion: 6 */
var abi;
var codeHex;
var smartContract;
var smartContractInstance;
window.addEventListener('load', function () {
  if (typeof web3 !== 'undefined') {
    console.log('Web3 Detected! ' + web3.currentProvider.constructor.name);
    console.log("Web3 Version: " + web3.version.api);
    abi = _resources.ABI;
    codeHex = web3.toHex(_resources.CODE_HEX);
    smartContract = web3.eth.contract(abi);
  } else {
    console.log('No Web3 Detected... using HTTP Provider');
    window.web3 = new Web3(new Web3.providers.HttpProvider("http://localhost:8545"));
  }
});

function getSelectedMetaMaskAccount() {
  return web3.eth.accounts[0];
}

function setDefaultAccount(address) {
  web3.eth.defaultAccount = address;
}

function setSmartContractInstance(contractAddress) {
  smartContractInstance = smartContract.at(contractAddress);
} // this does not exist for Kovan chain


function unlockAccount(address) {
  return new Promise(function (resolve, reject) {
    web3.personal.unlockAccount(address, "user", web3.toHex(0), function (err, result) {
      if (err) {
        reject(err);
      } else {
        console.log("Account has been unlocked: " + JSON.stringify(result));
        resolve();
      }
    });
  });
}

function instantiateNew(holderAddress, counterPartyAddress) {
  return new Promise(function (resolve, reject) {
    smartContract["new"](holderAddress, counterPartyAddress, {
      data: codeHex,
      from: web3.eth.defaultAccount
    }, function (err, contractInstance) {
      //smartContract.new({data: dataIn, from: web3.eth.defaultAccount, gasPrice: 4000000000, gas: gasLimit}, function (err, contractInstance) {
      if (err) {
        reject(err);
      } else {
        var transactionHash = contractInstance.transactionHash;
        console.log("TransactionHash: " + transactionHash + " waiting to be mined...");
        resolve(transactionHash);
      }
    });
  });
}

function depositCollateral(senderAddress, amount) {
  return new Promise(function (resolve, reject) {
    smartContractInstance.depositCollateral(amount, {
      from: senderAddress,
      value: web3.toWei(amount, "ether")
    }, function (err, result) {
      if (err) {
        reject(err);
      } else {
        resolve(result.toString(10));
      }
    });
  });
}

function holderBalance() {
  return new Promise(function (resolve, reject) {
    smartContractInstance.holderBalance(function (err, result) {
      if (err) {
        reject(err);
      } else {
        resolve(web3.toDecimal(result));
      }
    });
  });
}

function counterPartyBalance() {
  return new Promise(function (resolve, reject) {
    smartContractInstance.counterPartyBalance(function (err, result) {
      if (err) {
        reject(err);
      } else {
        resolve(web3.toDecimal(result));
      }
    });
  });
}

function holderAddress() {
  return new Promise(function (resolve, reject) {
    smartContractInstance.holderAddress(function (err, result) {
      if (err) {
        reject(err);
      } else {
        var unpaddedAddr = web3.toHex(result.toString(10)); // pad address to length of 42

        var paddedAddr = unpaddedAddr.split("0x")[1].padStart(40, '0');
        resolve("0x" + paddedAddr);
      }
    });
  });
}

function counterPartyAddress() {
  return new Promise(function (resolve, reject) {
    smartContractInstance.counterPartyAddress(function (err, result) {
      if (err) {
        reject(err);
      } else {
        var unpaddedAddr = web3.toHex(result.toString(10)); // pad address to length of 42

        var paddedAddr = unpaddedAddr.split("0x")[1].padStart(40, '0');
        resolve("0x" + paddedAddr);
      }
    });
  });
}

function balanceOfAddress(address) {
  return new Promise(function (resolve, reject) {
    smartContractInstance.balanceOfAddress(web3.toChecksumAddress(address), function (err, result) {
      if (err) {
        reject(err);
      } else {
        resolve(web3.toDecimal(result));
      }
    });
  });
}

function watchTransferEvent() {
  return new Promise(function (resolve, reject) {
    smartContractInstance.TransferEvent({}, function (err, event) {
      if (err) {
        reject(err);
      } else {
        resolve(event.args["boolean"]); // returns true iff transfer was successful
      }
    });
  });
}

function transfer(fromAddress, toAddress, amount) {
  return new Promise(function (resolve, reject) {
    smartContractInstance.transfer(fromAddress, toAddress, amount, function (err, result) {
      if (err) {
        reject(err);
      } else {
        resolve(result);
      }
    });
  });
}

function waitForReceipt(transactionHash) {
  return new Promise(function (resolve, reject) {
    web3.eth.getTransactionReceipt(transactionHash, function (err, receipt) {
      if (err) {
        reject(err);
      } else {
        if (receipt !== null) {
          // Transaction went through
          resolve(receipt);
        } else {
          // Try again in 1 second
          window.setTimeout(function () {
            waitForReceipt(transactionHash);
          }, 1000);
        }
      }
    });
  });
}

},{"./resources.mjs":3}],3:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CODE_HEX = exports.ABI = void 0;
var ABI = [{
  "type": "function",
  "name": "balanceOfAddress",
  "inputs": [{
    "name": "_address",
    "type": "address"
  }],
  "outputs": [{
    "name": "returnValue0",
    "type": "uint256"
  }],
  "constant": true,
  "payable": false
}, {
  "type": "function",
  "name": "holderBalance",
  "inputs": [],
  "outputs": [{
    "name": "returnValue0",
    "type": "uint256"
  }],
  "constant": true,
  "payable": false
}, {
  "type": "function",
  "name": "counterPartyBalance",
  "inputs": [],
  "outputs": [{
    "name": "returnValue0",
    "type": "uint256"
  }],
  "constant": true,
  "payable": false
}, {
  "type": "function",
  "name": "callerBalance",
  "inputs": [],
  "outputs": [{
    "name": "returnValue0",
    "type": "uint256"
  }],
  "constant": true,
  "payable": false
}, {
  "type": "function",
  "name": "holderAddress",
  "inputs": [],
  "outputs": [{
    "name": "returnValue0",
    "type": "uint256"
  }],
  "constant": true,
  "payable": false
}, {
  "type": "function",
  "name": "counterPartyAddress",
  "inputs": [],
  "outputs": [{
    "name": "returnValue0",
    "type": "uint256"
  }],
  "constant": true,
  "payable": false
}, {
  "type": "function",
  "name": "callerAddress",
  "inputs": [],
  "outputs": [{
    "name": "returnValue0",
    "type": "uint256"
  }],
  "constant": true,
  "payable": false
}, {
  "type": "function",
  "name": "transfer",
  "inputs": [{
    "name": "_from",
    "type": "address"
  }, {
    "name": "_to",
    "type": "address"
  }, {
    "name": "_amount",
    "type": "uint256"
  }],
  "outputs": [],
  "constant": false,
  "payable": false
}, {
  "type": "function",
  "name": "depositCollateral",
  "inputs": [{
    "name": "amount",
    "type": "uint256"
  }],
  "outputs": [],
  "constant": false,
  "payable": true
}, {
  "type": "event",
  "name": "TransferEvent",
  "inputs": [{
    "name": "boolean",
    "type": "int32",
    "indexed": false
  }]
}, {
  "type": "constructor",
  "inputs": [{
    "name": "holder_address",
    "type": "address"
  }, {
    "name": "counter_party_address",
    "type": "address"
  }]
}];
exports.ABI = ABI;
var CODE_HEX = '
exports.CODE_HEX = CODE_HEX;

},{}],4:[function(require,module,exports){
(function (global){
"use strict";

var _stringmanipulation = require("./stringmanipulation.mjs");

var _contract = require("./contract.mjs");

var _deploy = require("./deploy/deploy.mjs");

var _oracles = require("./oracles.mjs");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

//TODO: add window for user to add definitions by typing 'c1 = give zero' then whenever parsing through string we replace every c1 with its value in the map
//TODO: add gas estimation of transfers
//TODO: go over conditionalEvaluation to check if correct for all cases
var numberOfSubContracts = 0;
var numberOfContracts = 0;
var stringToAddToBeginning = ""; // string that is added to the beginning of the contract when outer most does not contain any conjunctions ie. 'truncate' will simply be added to contract string and rest will be decomposed

var superContractsMap = new Map(); // map from superContract id to set of contract objects contained within super contract

var agreedOracleAddress;
var account1Deposited = false;
var account2Deposited = false;
var definitionsMap = new Map();
$(function () {
  var $select = $(".custom_select");

  for (var i = 1; i <= 100; ++i) {
    $select.append($('<option></option>').val(i).html(i));
  }
});
window.addEventListener('load', function () {
  // commented for testing purposes

  /*
    document.getElementById("deposit_button1").disabled = true;
    document.getElementById("deposit_button2").disabled = true;
    document.getElementById("make_transaction_button").disabled = true;
    document.getElementById("select_deposit").disabled = true;
    document.getElementById("transaction_input_textarea").disabled = true;
    */
  (0, _oracles.createOracles)(); // start timer

  update();
  runClock();
}); // TODO: transform input ie decrease spaces

global.addDefinition = function (inputString) {
  document.getElementById("add_definitions_status").innerHTML = ""; // pattern matching for semantics

  var matches = inputString.match(/^\w+\s=\s.+;$/);

  if (matches === null) {
    document.getElementById("add_definitions_status").innerHTML = "The format of the given definition is incorrect.";
    return;
  }

  document.getElementById("input_added_textarea").innerHTML = "";
  var strArr = inputString.split("=");
  var part1 = (0, _stringmanipulation.rTrimWhiteSpace)(strArr[0]);
  var part2 = (0, _stringmanipulation.trimSemiColon)((0, _stringmanipulation.lTrimWhiteSpace)(strArr[1])); // check semantics of second part

  var secondArr = part2.split(" ");

  for (var i = 0; i < secondArr.length; ++i) {
    var term = secondArr[i];

    if (term !== "give" && term !== "truncate" && term !== "get" && term !== "one" && term !== "zero" && term !== "scaleK" && term !== "one" && term !== "{==}" && term !== "{>=}" && term !== "{<=}" && term !== "{<}" && term !== "{>}" && term !== "[==]" && term !== "[>=]" && term !== "[<=]" && term !== "[<]" && term !== "[>]" && term !== "&&" && term !== "||" && !parseFloat(term) && !isDate((0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(term))) && term !== "else" && term !== "}" && term !== "{" && term !== "and" && term !== "or" && term !== "libor3m" && term !== "tempInLondon" && !definitionsMap.has(term)) {
      document.getElementById("add_definitions_status").innerHTML = "The format of the given definition is incorrect.";
      return;
    }
  }

  definitionsMap.set(part1, part2);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = definitionsMap[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _step$value = _slicedToArray(_step.value, 2),
          key = _step$value[0],
          value = _step$value[1];

      document.getElementById("input_added_textarea").innerHTML += key + " = " + value + "\n";
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator["return"] != null) {
        _iterator["return"]();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
};

global.getDefinitionsText = function () {
  return document.getElementById("add_input_textarea").value;
};

function update() {
  // loop through all contracts and check if their time == current time and if so check if get or not
  // if get: then execute
  // if not get: then disable acquire button
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = superContractsMap[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      var _step2$value = _slicedToArray(_step2.value, 2),
          superContractId = _step2$value[0],
          contractsSet = _step2$value[1];

      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = contractsSet[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          var contract = _step3.value;

          if (contract.horizonDate !== "infinite" && beforeCurrentDate(contract.horizonDate)) {
            if (contract.toBeExecutedAtHorizon === "yes") {
              // contract contains 'get' - must be executed now
              executeSingleContract(contract);
            } else {
              // contract just contains 'truncate' and not 'get'
              document.getElementById("td_status_" + contract.id).innerHTML = "expired";
              deleteFromSuperContracts(superContractId, contract);
            }
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3["return"] != null) {
            _iterator3["return"]();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2["return"] != null) {
        _iterator2["return"]();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }
}

function runClock() {
  // every 60 seconds we check for expired contracts
  var now = new Date();
  var timeToNextTick = (60 - now.getSeconds()) * 1000 - now.getMilliseconds();
  setTimeout(function () {
    update();
    runClock();
  }, timeToNextTick);
}

global.callDepositFunction = function (id) {
  document.getElementById("create_contract_status").innerHTML = "";
  var addr = "";

  if (id === 1) {
    addr = "holder_address";
  } else {
    addr = "counter_party_address";
  }

  var depositAmount = getSelectedDeposit();
  var senderAddress = document.getElementById(addr).value;

  if ((0, _deploy.getSelectedMetaMaskAccount)().toUpperCase() === senderAddress.toUpperCase()) {
    (0, _deploy.depositCollateral)(senderAddress, depositAmount).then(function (holderDepositTxHash) {
      (0, _deploy.waitForReceipt)(holderDepositTxHash).then(function (_) {
        console.log("Deposit of " + depositAmount + " Ether has been added to " + addr + " account.");
        document.getElementById("select_deposit").disabled = true;

        if (id === 1) {
          account1Deposited = true;
        } else {
          account2Deposited = true;
        }

        if (account1Deposited && account2Deposited) {
          document.getElementById("make_transaction_button").disabled = false;
        }

        retrieveBalances();
      });
    });
  } else {
    document.getElementById("create_contract_status").innerHTML = "Please change the currently selected MetaMask account to the one you would like to deposit to.";
  }
};

global.createContractFunction = function () {
  document.getElementById("create_contract_status").innerHTML = "";
  var localHolderAddress = document.getElementById("holder_address").value;
  var localCounterPartyAddress = document.getElementById("counter_party_address").value; // TODO: check if getSelectedMetaMaskAccount returns valid result, if not log error telling user to log in

  if ((0, _deploy.getSelectedMetaMaskAccount)().toUpperCase() === localHolderAddress.toUpperCase()) {
    (0, _deploy.setDefaultAccount)(localHolderAddress);
    (0, _deploy.instantiateNew)(localHolderAddress, localCounterPartyAddress).then(function (instantiationTxHash) {
      (0, _deploy.waitForReceipt)(instantiationTxHash).then(function (instantiationReceipt) {
        (0, _deploy.setSmartContractInstance)(instantiationReceipt.contractAddress);
        document.getElementById("create_contract_button").disabled = true;
        document.getElementById("select_oracle").disabled = true;
        document.getElementById("holder_address").disabled = true;
        document.getElementById("counter_party_address").disabled = true;
        document.getElementById("deposit_button1").disabled = false;
        document.getElementById("deposit_button2").disabled = false;
        document.getElementById("select_deposit").disabled = false;
        agreedOracleAddress = getSelectedOracle();
      });
    });
  } else {
    document.getElementById("create_contract_status").innerHTML = "Please change the currently selected MetaMask account to the contract holder account.";
  }
};

function getSelectedDeposit() {
  return document.getElementById("select_deposit").value;
}

function getSelectedOracle() {
  return document.getElementById("select_oracle").value;
}

global.getInputString = function () {
  return document.getElementById("transaction_input_textarea").value;
}; // split string into '(...)', '{...}', '{...}' (if contains else)
// split by outermost comparison operator
// find horizon of each contract - check if date is later
// replace if clause by contract either {true} or {false} contract


function evaluateConditionals(inputString) {
  var openingParens = 0;
  var closingParens = 0;
  var stack = [];
  var ifsStack = []; // keeping stack of leftover opening parenthesis in from previous ifs

  var ifCondition = "";
  var ifsToBeMatched = 0; // keeps track of how many ifs have been read ie. how nested clause is

  var termArr = inputString.split(" ");

  for (var i = 0; i < termArr.length; ++i) {
    var term = termArr[i];
    var nextTerm = termArr[i + 1]; // for syntax checking

    stack.push(term);

    if (term === "if") {
      if (i >= termArr.length - 3 || nextTerm !== "(" || i > 0 && (termArr[i - 1] === ")" || termArr[i - 1] === "truncate" || termArr[i - 1] === "scaleK" || termArr[i - 1] === "get" || termArr[i - 1] === "truncate" || termArr[i - 1] === "}")) {
        document.getElementById("transaction_status").innerHTML = "syntax error at term " + (i + 1).toString() + ": " + nextTerm;
        return "error";
      }

      ++ifsToBeMatched;
      ifsStack.push(openingParens - closingParens);
    } else if (term === "(") {
      if (i >= termArr.length - 3 || nextTerm === ")" || nextTerm === "{>}" || nextTerm === "{<}" || nextTerm === "{>=}" || nextTerm === "{<=}" || nextTerm === "{==}" || nextTerm === "[>]" || nextTerm === "[<]" || nextTerm === "[>=]" || nextTerm === "[<=]" || nextTerm === "[==]" || nextTerm === "{&&}" || nextTerm === "||" || nextTerm === "{" || nextTerm === "}" || i > 0 && (termArr[i - 1] === ")" || termArr[i - 1] === "one" || termArr[i - 1] === "zero")) {
        document.getElementById("transaction_status").innerHTML = "syntax error at term " + (i + 1).toString() + ": " + nextTerm;
        return "error";
      }

      ++openingParens;
    } else if (term === ")") {
      if (i < termArr.length - 1 && (nextTerm === "if" || nextTerm === "(" || nextTerm === "}")) {
        document.getElementById("transaction_status").innerHTML = "syntax error at term " + (i + 1).toString() + ": " + nextTerm;
        return "error";
      }

      ++closingParens;

      if (ifsStack.length === 0 && openingParens === closingParens && ifsToBeMatched !== 0 || openingParens - ifsStack[ifsStack.length - 1] === closingParens) {
        // pop from stack until we have read 'if'
        while (stack[stack.length - 1] !== "if") {
          if (ifCondition === "") {
            ifCondition = stack.pop();
          } else {
            ifCondition = stack.pop() + " " + ifCondition;
          }
        }

        console.log("if condition: " + ifCondition);
        stack.pop(); // popping 'if' off stack

        --ifsToBeMatched; // performance is good here: not parsing {}{} stuff

        var leftOverArr = termArr.slice(i + 1);
        var firstIndexClosingBrack = leftOverArr.indexOf("}");
        var action1Arr = leftOverArr.slice(1, firstIndexClosingBrack);
        var action1 = action1Arr.join(" ");
        console.log("action1: " + action1);
        var action2Arr = [];
        var action2 = "";

        if (leftOverArr[firstIndexClosingBrack + 1] === "else") {
          leftOverArr = leftOverArr.slice(firstIndexClosingBrack + 2); // + 2 because of 'else'

          firstIndexClosingBrack = leftOverArr.indexOf("}");
          action2Arr = leftOverArr.slice(1, firstIndexClosingBrack);
          action2 = action2Arr.join(" ");
        }

        console.log("action2: " + action2);
        var bool = evaluate((0, _stringmanipulation.rTrimWhiteSpace)((0, _stringmanipulation.lTrimWhiteSpace)((0, _stringmanipulation.rTrimParen)((0, _stringmanipulation.lTrimParen)(ifCondition)))));
        console.log("bool: " + bool);

        if (stack[stack.length - 1] === "(" && leftOverArr[firstIndexClosingBrack + 1] === ")") {
          stack.pop(); // get rid of previous '('

          ++i; // skip next previous ')'

          leftOverArr.splice(firstIndexClosingBrack + 1, 1); // for check in action=="" part

          ++closingParens;
        }

        if (bool) {
          // if the if clause succeeds then execute action1
          stack.push((0, _stringmanipulation.lTrimBrace)((0, _stringmanipulation.rTrimBrace)(action1)));
        } else {
          if (action2 == "") {
            if (stack[stack.length - 1] === "and" || stack[stack.length - 1] === "or") {
              stack.pop();
            }

            if (leftOverArr[firstIndexClosingBrack + 1] === "and" || leftOverArr[firstIndexClosingBrack + 1] === "or") {
              ++i;
            }
          }

          stack.push((0, _stringmanipulation.lTrimBrace)((0, _stringmanipulation.rTrimBrace)(action2)));
        }

        console.log("stack:");
        console.log(stack); // skip next terms until end of conditional clause is reached

        i = i + action1Arr.length + 2;

        if (action2Arr.length !== 0) {
          i = i + 1 + action2Arr.length + 2;
        }
      }

      ifsStack.pop();
      ifCondition = "";
    } else if (term !== "give" && term !== "truncate" && term !== "get" && term !== "one" && term !== "zero" && term !== "scaleK" && term !== "one" && term !== "{==}" && term !== "{>=}" && term !== "{<=}" && term !== "{<}" && term !== "{>}" && term !== "[==]" && term !== "[>=]" && term !== "[<=]" && term !== "[<]" && term !== "[>]" && term !== "&&" && term !== "||" && !parseFloat(term) && !isDate((0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(term))) && term !== "else" && term !== "}" && term !== "{" && term !== "and" && term !== "or" && term !== "libor3m" && term !== "tempInLondon") {
      // give error
      document.getElementById("transaction_status").innerHTML = "syntax error at term " + i.toString() + ": " + term;
      return "error";
    }
  }

  var contractString = "";

  while (stack.length !== 0) {
    contractString = stack.pop() + " " + contractString;
  }

  return (0, _stringmanipulation.lTrimWhiteSpace)((0, _stringmanipulation.rTrimWhiteSpace)(contractString));
}

function evaluate(inputString) {
  var strArr = inputString.split(" ");
  var openingParens = 0;

  for (var i = 0; i < strArr.length; ++i) {
    var term = strArr[i];

    if (term === "(") {
      ++openingParens;
    } else if (term === ")") {
      --openingParens;
    } else if (openingParens === 0) {
      if (term === "||" || term === "&&") {
        var part1 = strArr.slice(0, i).join(" ");
        var part2 = strArr.slice(i + 1).join(" ");
        var bool1 = evaluate((0, _stringmanipulation.lTrimWhiteSpace)((0, _stringmanipulation.rTrimWhiteSpace)((0, _stringmanipulation.lTrimParen)((0, _stringmanipulation.rTrimParen)(part1)))));
        var bool2 = evaluate((0, _stringmanipulation.lTrimWhiteSpace)((0, _stringmanipulation.rTrimWhiteSpace)((0, _stringmanipulation.lTrimParen)((0, _stringmanipulation.rTrimParen)(part2)))));

        if (term === "||") {
          return bool1 || bool2;
        } else if (term === "&&") {
          return bool1 && bool2;
        }
      } else if (term === "{>}" || term === "{<}" || term === "{==}" || term === "{>=}" || term === "{<=}") {
        // Horizon Comparison
        // can only compare two contracts - cannot have a logical operator between two contracts
        // if no truncate included then horizon is infinite, else find max date
        var part1 = strArr.slice(0, i).join(" ");
        var part2 = strArr.slice(i + 1).join(" ");
        var horizon1 = getHorizon(part1);
        var horizon2 = getHorizon(part2);

        if (term === "{>=}") {
          if (horizon1 === "infinite" || horizon2 === "infinite") {
            if (horizon1 === "infinite" && horizon2 === "infinite") {
              return true;
            } else {
              if (horizon1 === "infinite") {
                return true;
              } else {
                return false;
              }
            }
          }

          return greaterDate(horizon1, horizon2) || equalDates(horizon1, horizon2);
        } else if (term === "{>}") {
          if (horizon1 === "infinite" || horizon2 === "infinite") {
            if (horizon1 === "infinite" && horizon2 === "infinite") {
              return false;
            } else {
              if (horizon1 === "infinite") {
                return true;
              } else {
                return false;
              }
            }
          }

          return greaterDate(horizon1, horizon2);
        } else if (term === "{<=}") {
          if (horizon1 === "infinite" || horizon2 === "infinite") {
            if (horizon1 === "infinite" && horizon2 === "infinite") {
              return true;
            } else {
              if (horizon1 === "infinite") {
                return false;
              } else {
                return true;
              }
            }
          }

          return !greaterDate(horizon1, horizon2) || equalDates(horizon1, horizon2);
        } else if (term === "{<}") {
          if (horizon1 === "infinite" || horizon2 === "infinite") {
            if (horizon1 === "infinite" && horizon2 === "infinite") {
              return false;
            } else {
              if (horizon1 === "infinite") {
                return false;
              } else {
                return true;
              }
            }
          }

          return !greaterDate(horizon1, horizon2);
        } else if (term === "{==}") {
          if (horizon1 === "infinite" || horizon2 === "infinite") {
            if (horizon1 === "infinite" && horizon2 === "infinite") {
              return true;
            } else {
              return false;
            }
          }

          return equalDates(horizon1, horizon2);
        }
      } else if (term === "[>]" || term === "[<]" || term === "[==]" || term === "[>=]" || term === "[<=]") {
        // Value Comparison
        // can only compare two contracts - so we cannot have (a & b) > (c | d), cannot have  a & b or  a | b
        var part1 = strArr.slice(0, i).join(" ");
        var part2 = strArr.slice(i + 1).join(" ");
        var value1 = getValue(part1);
        var value2 = getValue(part2);

        if (term === "[>=]") {
          return value1 >= value2;
        } else if (term === "[>]") {
          return value1 > value2;
        } else if (term === "[<=]") {
          return value1 <= value2;
        } else if (term === "[<]") {
          return value1 < value2;
        } else if (term === "[==]") {
          return value1 === value2;
        }
      }
    }
  }
}

function getHorizon(contractString) {
  // Loops through the whole contract to find the largest horizon
  if (!contractString.includes("truncate")) {
    return "infinite";
  } else {
    // Find minimum horizon, but beforeCurrentDate() must return false
    var strArr = contractString.split(" ");
    var indexOfFirstTruncate = strArr.indexOf("truncate");
    var substringArr = strArr.slice(indexOfFirstTruncate + 1);
    var maxHorizon = substringArr[0]; // setting first horizon as maxHorizon

    var comeAcrossTruncate = false;

    for (var i = 0; i < strArr.length; ++i) {
      if (strArr[i] === "truncate") {
        // obtain c from 'truncate t c'
        var truncDate = strArr[i + 1];
        var c = obtainContractString(strArr.slice(i + 2)); // obtain c's previous horizon

        var prevHorizon = getHorizon(c); // compare previous horizon with new horizon t and get min

        var currentHor = truncDate;

        if (prevHorizon !== "infinite" && greaterDate(truncDate, prevHorizon)) {
          currentHor = prevHorizon;
        }

        comeAcrossTruncate = true;

        if (greaterDate(currentHor, maxHorizon)) {
          maxHorizon = currentHor;
        }

        ++i;
      } else if (strArr[i] === "and" || strArr[i] === "or") {
        // have reached end of subcontract
        if (!comeAcrossTruncate) {
          // if we have not come across a "truncate" then this subcontract's horizon is infinite
          return "infinite";
        }

        comeAcrossTruncate = false;
      }
    }

    return maxHorizon;
  }
}

function getValue(contractString) {
  var strArr = contractString.split(" "); // check if string contains conjunction

  if (contractString.includes("and") || contractString.includes("or")) {
    // find most balanced conjunction
    var indexOfMostBalancedConj = 0;
    var mostBalancedConjType = "";
    var mostBalancedConjBalance = strArr.length;
    var openingParens = 0;

    for (var i = 0; i < strArr.length; ++i) {
      if (strArr[i] === "(") {
        ++openingParens;
      } else if (strArr[i] === ")") {
        --openingParens;
      } else if (strArr[i] === "and" || strArr[i] === "or") {
        if (openingParens < mostBalancedConjBalance) {
          indexOfMostBalancedConj = i;
          mostBalancedConjType = strArr[i];
          mostBalancedConjBalance = openingParens;
        }
      }
    } // split contract by mostBalanced conj and perform getValue and getHorizon on both parts


    var part1 = strArr.slice(0, indexOfMostBalancedConj).join(" ");
    var part2 = strArr.slice(indexOfMostBalancedConj + 1).join(" ");
    var horizon1 = getHorizon(part1);
    var horizon2 = getHorizon(part2);
    var value1 = getValue(part1);
    var value2 = getValue(part2);

    if (!beforeCurrentDate((0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(horizon1))) && !beforeCurrentDate((0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(horizon2)))) {
      if (mostBalancedConjType === "and") {
        return value1 + value2;
      } else {
        return Math.max(value1, value2);
      }
    } else if (!beforeCurrentDate((0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(horizon1))) && beforeCurrentDate((0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(horizon2)))) {
      return value1;
    } else if (beforeCurrentDate((0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(horizon1))) && !beforeCurrentDate((0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(horizon2)))) {
      return value2;
    } else {
      // both have expired - return 0
      return 0;
    }
  } else {
    // string does not contain conjunction
    var value = 1;

    if (contractString.includes("zero")) {
      return 0;
    } else {
      for (var i = 0; i < strArr.length; ++i) {
        if (strArr[i] === "scaleK" && i < strArr.length - 2 && parseFloat(strArr[i + 1])) {
          value = value * parseFloat(strArr[i + 1]);
        } else if (strArr[i] === "give") {
          value = -value;
        }
      }

      if (beforeCurrentDate((0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(getHorizon(contractString))))) {
        return 0;
      } else {
        return value;
      }
    }
  }
}

function obtainContractString(array) {
  // if string starts with opening paren wait until get balanced closing paren
  if (array[0] === "(") {
    var openingParens = 1;

    for (var i = 1; i < array.length; ++i) {
      if (array[i] === "(") {
        ++openingParens;
      } else if (array[i] === ")") {
        --openingParens;
      }

      if (openingParens === 0) {
        return array.slice(0, i + 1).join(' ');
      }
    }
  } else {
    // else wait until reading 'zero' or 'one'
    for (var i = 0; i < array.length; ++i) {
      if (array[i] === "one" || array[i] === "zero") {
        return array.slice(0, i + 1).join(' ');
      }
    }
  }
}

function correctSyntax(inputString) {
  if (inputString === "") {
    document.getElementById("transaction_status").innerHTML = "Please provide some contract input.";
    return false;
  }

  if ((0, _stringmanipulation.openingParensAmount)(inputString) !== (0, _stringmanipulation.closingParensAmount)(inputString)) {
    document.getElementById("transaction_status").innerHTML = "The contract is not constructed properly. Parenthesis mismatch.";
    return false;
  }

  if (!inputString.includes("one") && !inputString.includes("zero")) {
    document.getElementById("transaction_status").innerHTML = "The contract is not constructed properly. A contract must include either 'one' or 'zero'.";
    return false;
  }

  if (inputString.includes("get") && !inputString.includes("truncate")) {
    document.getElementById("transaction_status").innerHTML = "The contract is not constructed properly. A contract cannot contain 'get' without 'truncate'.";
    return false;
  }

  return true;
}

function replaceUserDefinitions(inputString) {
  var strSplit = inputString.split(" ");
  var keys = Array.from(definitionsMap.keys());
  var intersection = strSplit.filter(function (value) {
    return keys.includes(value);
  });

  while (intersection.length !== 0) {
    for (var i = 0; i < intersection.length; ++i) {
      var regex = new RegExp("(.*)(" + intersection[i] + ")(.*)");
      var matchObj = regex.exec(inputString);
      var value = definitionsMap.get(intersection[i]);

      if (value.indexOf("one") !== value.lastIndexOf("one") || value.indexOf("zero") !== value.lastIndexOf("zero") || value.includes("one") && value.includes("zero")) {
        // value consists of multiple contracts - add parenthesis
        inputString = matchObj[1] + "( " + definitionsMap.get(intersection[i]) + " )" + matchObj[3];
      } else {
        inputString = matchObj[1] + definitionsMap.get(intersection[i]) + matchObj[3];
      }
    }

    strSplit = inputString.split(" ");
    intersection = strSplit.filter(function (value) {
      return keys.includes(value);
    });
  }

  return inputString;
} // TODO: add syntax checking to this method - right now this happens in createContract object: too late as other correct contracts get added anyways


global.decomposeOrs = function (inputString) {
  document.getElementById("transaction_status").innerHTML = "";

  if (!correctSyntax(inputString)) {
    return;
  } // replacing own definitions with map values


  inputString = replaceUserDefinitions(inputString); // add dash between date day and time for processing purposes

  inputString = (0, _stringmanipulation.changeDateFormat)(inputString); // remove linebreaks, then multiple whitespaces

  inputString = inputString.replace(/(\r\n|\n|\r)/gm, " ").replace(/  +/g, ' '); // add spacing before and after parenthesis

  inputString = (0, _stringmanipulation.addSpacing)(inputString); // evaluate & replace if clauses

  var ifMatches = inputString.match(/^(.*)\sif\s(.*)$/);

  if (ifMatches !== null) {
    inputString = evaluateConditionals(inputString);
  }

  if (inputString === "" || inputString === "error") {
    return;
  }

  inputString = (0, _stringmanipulation.rTrimWhiteSpace)((0, _stringmanipulation.lTrimWhiteSpace)(inputString));
  removeChildren("button_choices_container");
  var noOfOpeningParens = 0;
  var noOfClosingParens = 0;
  var contractsStack = [];
  stringToAddToBeginning = ""; // check if inputstring contains 'or' else execute right away

  var orMatches = inputString.match(/^(.*)\sor\s(.*)$/);

  if (orMatches !== null) {
    var firstOpeningParenOcc = inputString.indexOf("(");
    var firstSubstring = inputString.slice(0, firstOpeningParenOcc);

    if (!firstSubstring.includes("or")) {
      inputString = inputString.slice(firstOpeningParenOcc, inputString.length);
      stringToAddToBeginning = firstSubstring;
    }

    var strArr = inputString.split(" ");
    var indexOfMostBalancedOr = strArr.length - 1;
    var mostBalancedOr = strArr.length - 1;

    for (var i = 0; i < strArr.length; ++i) {
      var term = strArr[i];

      if (term === "or") {
        if (noOfOpeningParens === noOfClosingParens) {
          // found outer most conjunct
          contractsStack.push(strArr.slice(0, i).join(' '));
          contractsStack.push(strArr.slice(i + 1).join(' '));
          break;
        } else if (noOfOpeningParens > noOfClosingParens && noOfOpeningParens - noOfClosingParens < mostBalancedOr) {
          mostBalancedOr = noOfOpeningParens - noOfClosingParens;
          indexOfMostBalancedOr = i;
        }
      } else {
        if (term === "(") {
          if (i === strArr.length - 1 || i > 0 && (strArr[i - 1] === ")" || strArr[i - 1] === "one" || strArr[i - 1] === "zero") || strArr[i + 1] === "and" || strArr[i + 1] === "or" || strArr[i + 1] === ")") {
            document.getElementById("transaction_status").innerHTML = "syntax error at term " + i.toString() + ": " + term;
            return;
          }

          ++noOfOpeningParens;
        } else if (term === ")") {
          if (i < strArr.length - 1 && strArr[i + 1] !== "and" && strArr[i + 1] !== "or" || i <= 1 || strArr[i - 1] !== "one" && strArr[i - 1] !== "zero") {
            document.getElementById("transaction_status").innerHTML = "syntax error at term " + i.toString() + ": " + term;
            return;
          }

          ++noOfClosingParens;

          if (i === strArr.length - 1) {
            contractsStack.push(inputString);
          }
        } else if (term === "give") {
          if (i === strArr.length - 1 || strArr[i + 1] !== "one" && strArr[i + 1] !== "zero") {
            document.getElementById("transaction_status").innerHTML = "The contract is not constructed properly. 'give' should be followed by 'one' or 'zero'."; //document.getElementById("transaction_status").innerHTML = "syntax error at term " + (i + 1).toString() + ": " + nextTerm;

            return;
          }
        } else if (term === "truncate") {
          if (i > strArr.length - 3 || !isDate((0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(strArr[i + 1])))) {
            document.getElementById("transaction_status").innerHTML = "syntax error at term " + i.toString() + ": " + term;
            return;
          }
        } else if (term === "scaleK") {
          if (i > strArr.length - 3 || !parseFloat(strArr[i + 1])) {
            document.getElementById("transaction_status").innerHTML = "syntax error at term " + i.toString() + ": " + term;
            return;
          }
        } else if (term === "get") {} else if (term === "zero" || "term" === "one") {
          if (i < strArr.length - 1 && (strArr[i + 1] !== "and" || strArr[i + 1] !== "or" || strArr[i + 1] !== ")")) {
            document.getElementById("transaction_status").innerHTML = "syntax error at term " + i.toString() + ": " + term;
            return;
          }
        } else if (!parseFloat(term) && !isDate((0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(term))) && term !== "and" && term !== "libor3m" && term !== "tempInLondon") {
          // give error
          document.getElementById("transaction_status").innerHTML = "syntax error at term " + i.toString() + ": " + term;
          return;
        }
      }

      if (noOfClosingParens > noOfOpeningParens) {
        document.getElementById("transaction_status").innerHTML = "The contract is not constructed properly. Parenthesis mismatch.";
        return;
      }
    }

    if (contractsStack.length === 1 && contractsStack[0].includes("or")) {
      contractsStack = splitContract(strArr, indexOfMostBalancedOr);
    }

    combineContracts(contractsStack);
  } else {
    // String does not include "or" -> execute right away
    var contractsArr = decomposeAnds(inputString);
    createContractEntries(contractsArr);
    ++numberOfContracts;
    numberOfSubContracts = 0;
  }
};

function createContractEntries(contractsArr) {
  // acquire button should be disabled if either all contracts are expired or all contracts are to be acquired at horizon ie 'get'
  var acquireBtnToBeDisabled1 = true;
  var acquireBtnToBeDisabled2 = true;

  for (var i = 0; i < contractsArr.length; ++i) {
    var conString = stringToAddToBeginning + (0, _stringmanipulation.cleanParens)((0, _stringmanipulation.lTrimWhiteSpace)((0, _stringmanipulation.rTrimWhiteSpace)(contractsArr[i])));

    if (!conString.includes("get")) {
      // at least one contract is not acquired at its horizon
      acquireBtnToBeDisabled1 = false;
    }

    if (!beforeCurrentDate((0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(getHorizon(conString))))) {
      // at least one subcontract has not expired yet
      acquireBtnToBeDisabled2 = false;
    }

    createContractObject(conString);
  }

  var tr = document.getElementById("my_table").insertRow(1);
  tr.className = "super_contract_row";
  var td;
  tr.appendChild(td = document.createElement("td"));
  var superContractKey = numberOfContracts.toString();
  td.innerHTML = superContractKey;

  for (var i = 0; i < 6; ++i) {
    tr.appendChild(td = document.createElement("td"));
  }

  var btn = document.createElement('input');
  btn.type = "button";
  btn.className = "acquire_button button";
  btn.id = "acquire_button_" + superContractKey;
  btn.value = "acquire";

  btn.onclick = function (_) {
    if (correctUserTryingToAcquire()) {
      executeSuperContract(superContractKey);
    } else {
      document.getElementById("table_status").innerHTML = "Please change the currently selected MetaMask account to the one owner of the contract you are trying to acquire.";
    }
  };

  td.appendChild(btn); // if either of these is true then we want the acquire button to be disabled

  if (acquireBtnToBeDisabled1 || acquireBtnToBeDisabled2) {
    btn.disabled = true;
  }
}

function decomposeAnds(contractString) {
  var outputArr = contractString.split(" ");
  var openingParens = 0;
  var contractString = "";
  var finalContractsArr = [];
  var operatorsStack = [];

  for (var i = 0; i < outputArr.length; ++i) {
    var term = outputArr[i];

    if (term === "and") {
      // we have reached the end of a subcontract whenever 'and' is read
      if (openingParens === 0 && contractString !== "") {
        finalContractsArr.push(contractString);
        contractString = "";
      } else if (openingParens > 0) {
        // apply all operators on the stack to this sub contract, without popping them
        for (var j = operatorsStack.length - 1; j >= 0; --j) {
          contractString = operatorsStack[j] + " ( " + contractString + " )";
        }

        finalContractsArr.push(contractString);
        contractString = "";
      }
    } else if (term === ")") {
      // as soon as closing paren is read we have found a contract
      --openingParens;

      if (outputArr[i + 1] === "and" && operatorsStack.length > 0) {
        finalContractsArr.push(operatorsStack.pop() + " ( " + contractString + " )");
        contractString = "";
      } else {
        // next item is ')' OR we are at last item
        if (operatorsStack.length > 0) {
          contractString = operatorsStack.pop() + " ( " + contractString + " )";
        }
      }
    } else if (term === "(") {
      ++openingParens;

      if (contractString !== "") {
        // to handle case where 'and' is followed by '('
        operatorsStack.push(contractString);
        contractString = "";
      }
    } else {
      if (contractString === "") {
        contractString = term;
      } else {
        contractString = contractString + " " + term;
      }
    }
  } // this happens if there is a balanced or conjunction at the end and the second part still needs to be added


  if (contractString !== "") {
    finalContractsArr.push(contractString);
  }

  return finalContractsArr;
}

function concatenate(arr1, arr2) {
  for (var i = 0; i < arr2.length; ++i) {
    arr1.push(arr2[i]);
  }

  return arr1;
}

function splitContract(contractStringArr, indexOfMostBalancedOr) {
  // do not split by "or" because this will split by first 'or' occurence
  // we want to split by 'or' occurrence with only 1 difference between |openingParens| and |closingParen|
  var newStack = [];
  newStack[0] = (0, _stringmanipulation.cleanParens)(contractStringArr.slice(0, indexOfMostBalancedOr).join(' '));
  newStack[1] = (0, _stringmanipulation.cleanParens)(contractStringArr.slice(indexOfMostBalancedOr + 1, contractStringArr.length - 1).join(' '));

  if ((0, _stringmanipulation.openingParensAmount)(newStack[0]) > (0, _stringmanipulation.closingParensAmount)(newStack[0])) {
    newStack[0] = newStack[0] + " )";
  }

  if ((0, _stringmanipulation.closingParensAmount)(newStack[1]) > (0, _stringmanipulation.openingParensAmount)(newStack[1])) {
    newStack[1] = "( " + newStack[1];
  }

  return newStack;
}

function combineContracts(contractsStack) {
  var contract1 = contractsStack.pop();
  var contract2 = contractsStack.pop();
  createSection();
  createButton((0, _stringmanipulation.rTrimWhiteSpace)((0, _stringmanipulation.lTrimWhiteSpace)(contract2)), 1);
  createOrLabel();
  createButton((0, _stringmanipulation.rTrimWhiteSpace)((0, _stringmanipulation.lTrimWhiteSpace)(contract1)), 2);
}

function createContractObject(inputString) {
  var recipient = 0; // by default the contract holder is the recipient

  var amount = "1";

  if (inputString.includes("zero")) {
    amount = "0";
  }

  var horizonDate = "infinite";
  var acquireAtHorizon = "no"; // used for get, ie if get is discovered then this is set to true

  var newStr = inputString.replace(/[()]/g, ''); // removing parenthesis

  var strArr = newStr.split(" ");

  for (var i = 0; i < strArr.length; ++i) {
    var str = strArr[i];

    if (str === "give") {
      recipient = 1;
    } else if (str === "scaleK" && !inputString.includes("zero")) {
      if (strArr.length > i + 1 && parseFloat(strArr[i + 1])) {
        amount = (parseFloat(amount) * parseFloat(strArr[i + 1])).toString();
        ++i;
      } else if (strArr.length > i + 1 && (strArr[i + 1] === "tempInLondon" || strArr[i + 1] === "libor3m")) {
        amount = strArr[i + 1];
        ++i;
      } else {
        console.error("Syntax error: scaleK should be followed by an integer or an observable.");
        document.getElementById("transaction_status").innerHTML = "Syntax error: scaleK should be followed by an integer or an observable.";
        return;
      }
    } else if (str === "truncate") {
      if (strArr.length > i + 1 && isDate((0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(strArr[i + 1])))) {
        horizonDate = strArr[i + 1];
        ++i;
      } else {
        console.error("Syntax error: truncate should be followed by a date in the following pattern: 'dd/mm/yyyy hh:mm:ss'.");
        document.getElementById("transaction_status").innerHTML = "Syntax error: truncate should be followed by a date in the following pattern: 'dd/mm/yyyy hh:mm:ss'.";
        return;
      }
    } else if (str === "get") {
      acquireAtHorizon = "yes";
    }
  }

  horizonDate = (0, _stringmanipulation.lTrimDoubleQuotes)((0, _stringmanipulation.rTrimDoubleQuotes)(horizonDate));
  var contract = new _contract.Contract(numberOfContracts.toString() + "." + numberOfSubContracts.toString(), amount, recipient, inputString, (0, _contract.translateContract)(recipient, amount, horizonDate, acquireAtHorizon), horizonDate, acquireAtHorizon, "waiting to be executed");
  createTableRow(contract);

  if (horizonDate !== "infinite" && beforeCurrentDate(contract.horizonDate)) {
    // add expired label
    document.getElementById("td_status_" + contract.id).innerHTML = "expired";
  } else {
    addToSuperContracts(numberOfContracts.toString(), contract); // contract is only added to pending contracts map if it is still valid

    document.getElementById("td_status_" + contract.id).innerHTML = "waiting to be executed";
  }

  ++numberOfSubContracts;
}

function addToSuperContracts(superKey, contract) {
  if (superContractsMap.has(superKey)) {
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = superContractsMap[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        var _step4$value = _slicedToArray(_step4.value, 2),
            superContractId = _step4$value[0],
            contractsSet = _step4$value[1];

        if (superContractId === superKey) {
          var newSet = contractsSet;
          newSet.add(contract);
          superContractsMap.set(superContractId, newSet);
          break;
        }
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4["return"] != null) {
          _iterator4["return"]();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }
  } else {
    var newSet = new Set();
    newSet.add(contract);
    superContractsMap.set(superKey, newSet);
  }

  console.log("SupercontractsMap after adding a contract");
  console.log(superContractsMap);
}

function deleteFromSuperContracts(superKey, contract) {
  var _iteratorNormalCompletion5 = true;
  var _didIteratorError5 = false;
  var _iteratorError5 = undefined;

  try {
    for (var _iterator5 = superContractsMap[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
      var _step5$value = _slicedToArray(_step5.value, 2),
          superContractId = _step5$value[0],
          contractsSet = _step5$value[1];

      if (superContractId === superKey) {
        var newSet = contractsSet;
        newSet["delete"](contract);
        superContractsMap.set(superContractId, newSet);

        if (newSet.size === 0) {
          superContractsMap["delete"](superContractId);
          document.getElementById("acquire_button_" + superContractId).disabled = true;
        }

        break;
      }
    }
  } catch (err) {
    _didIteratorError5 = true;
    _iteratorError5 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion5 && _iterator5["return"] != null) {
        _iterator5["return"]();
      }
    } finally {
      if (_didIteratorError5) {
        throw _iteratorError5;
      }
    }
  }

  console.log("SupercontractsMap after deleting a contract");
  console.log(superContractsMap);
}

function computeDateString(dateString) {
  var horizonArr = dateString.split("-");
  var dateArr = horizonArr[0].split("/");
  var timeArr = horizonArr[1].split(":"); // +01:00 to get BST from UTC

  var finalDateString = dateArr[2] + "-" + dateArr[1] + "-" + dateArr[0] + "T" + timeArr[0] + ":" + timeArr[1] + ":" + timeArr[2] + "+01:00"; // adding 15 seconds to the contract's expiry date to allow it to execute

  return finalDateString;
}

function beforeCurrentDate(contractDate) {
  if (contractDate === "infinite") {
    return false;
  }

  var contractDate = new Date(computeDateString(contractDate));
  var todayDate = new Date();

  if (contractDate.getTime() <= todayDate.getTime()) {
    return true;
  } else {
    return false;
  }
}

function equalDates(dateString1, dateString2) {
  // for first date
  var contractDate1 = new Date(computeDateString(dateString1)); // for second date

  var contractDate2 = new Date(computeDateString(dateString2));

  if (contractDate1.getTime() === contractDate2.getTime()) {
    return true;
  } else {
    return false;
  }
}

function greaterDate(dateString1, dateString2) {
  // returns true if dateString1 > dateString2
  // for first date
  var contractDate1 = new Date(computeDateString(dateString1)); // for second date

  var contractDate2 = new Date(computeDateString(dateString2));

  if (contractDate1.getTime() > contractDate2.getTime()) {
    return true;
  } else {
    return false;
  }
}

function executeSuperContract(superKey) {
  var _iteratorNormalCompletion6 = true;
  var _didIteratorError6 = false;
  var _iteratorError6 = undefined;

  try {
    for (var _iterator6 = superContractsMap[Symbol.iterator](), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {
      var _step6$value = _slicedToArray(_step6.value, 2),
          superContractId = _step6$value[0],
          contractsSet = _step6$value[1];

      if (superContractId === superKey) {
        var _iteratorNormalCompletion7 = true;
        var _didIteratorError7 = false;
        var _iteratorError7 = undefined;

        try {
          for (var _iterator7 = contractsSet[Symbol.iterator](), _step7; !(_iteratorNormalCompletion7 = (_step7 = _iterator7.next()).done); _iteratorNormalCompletion7 = true) {
            var contract = _step7.value;

            if (contract.toBeExecutedAtHorizon !== "yes") {
              executeSingleContract(contract);
            }
          }
        } catch (err) {
          _didIteratorError7 = true;
          _iteratorError7 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion7 && _iterator7["return"] != null) {
              _iterator7["return"]();
            }
          } finally {
            if (_didIteratorError7) {
              throw _iteratorError7;
            }
          }
        }
      }
    }
  } catch (err) {
    _didIteratorError6 = true;
    _iteratorError6 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion6 && _iterator6["return"] != null) {
        _iterator6["return"]();
      }
    } finally {
      if (_didIteratorError6) {
        throw _iteratorError6;
      }
    }
  }
}
/*
function regex(inputString) {
    var WHITESPACE =  "\\s";
    var OPENINGPAREN = "\\(";
    var CLOSINGPAREN = "\\)";

    var DATE = /((0?[1-9])|([12][0-9])|(3[01]))\/((0?[1-9])|(1[0-2]))\/(\d\d\d\d)-((0[0-9])|(1[0-9])|(2[0-3])):([0-5][0-9]):([0-5][0-9])/;
    var NUM = /([1-9][0-9]*(.[0-9]*[1-9])?)|(0(.[0-9]*[1-9])?)/;
    var CONJ = /(and|or)/;
    var TERMITEMS = /(one|zero)/;


    var TERM = new RegExp(TERMITEMS.source + "|(" + OPENINGPAREN + WHITESPACE + TERMITEMS.source + WHITESPACE + CLOSINGPAREN + ")|("
        + OPENINGPAREN + WHITESPACE + "give" + WHITESPACE + TERMITEMS.source + WHITESPACE + CLOSINGPAREN + ")|("
        + "give" + WHITESPACE + TERMITEMS.source + ")");


    var EXPR = new RegExp("(scaleK" + WHITESPACE + NUM.source + WHITESPACE + OPENINGPAREN + WHITESPACE + "get" + WHITESPACE + OPENINGPAREN + WHITESPACE + "truncate" + WHITESPACE + DATE.source + WHITESPACE + OPENINGPAREN + WHITESPACE + TERM.source + WHITESPACE + CLOSINGPAREN + WHITESPACE + CLOSINGPAREN + WHITESPACE + CLOSINGPAREN + ")|("
        + "get" + WHITESPACE + OPENINGPAREN + WHITESPACE + "truncate" + WHITESPACE + DATE.source + WHITESPACE + OPENINGPAREN + WHITESPACE + TERM.source + WHITESPACE + CLOSINGPAREN + WHITESPACE + CLOSINGPAREN + ")|("
        + "truncate" + WHITESPACE + DATE.source + WHITESPACE + OPENINGPAREN + WHITESPACE + TERM.source + WHITESPACE + CLOSINGPAREN + ")|("
        + "scaleK" + WHITESPACE + NUM.source + WHITESPACE + OPENINGPAREN + WHITESPACE + TERM.source + WHITESPACE + CLOSINGPAREN + ")|("
        + "scaleK" + WHITESPACE + NUM.source + WHITESPACE + OPENINGPAREN + WHITESPACE + "truncate" + WHITESPACE + DATE.source + WHITESPACE + OPENINGPAREN + TERM.source + WHITESPACE + CLOSINGPAREN + WHITESPACE + CLOSINGPAREN + ")|"
        + TERM.source);

    const FINAL = new RegExp("(" + EXPR.source + WHITESPACE + CONJ.source + WHITESPACE + EXPR.source + ")|" + EXPR.source);

    console.log("(" + EXPR.source + WHITESPACE + CONJ.source + WHITESPACE + EXPR.source + ")|" + EXPR.source);

    var matches = inputString.match(FINAL);
    if (matches === null) {
        return false;
    } else if (matches[0] === inputString) {
        return true;
    } else {
        return false;
    }
}
*/


function executeSingleContract(contract) {
  if (contract.amount === "tempInLondon") {
    contract.amount = (0, _oracles.getOracleByAddress)(agreedOracleAddress).getTempInLondon().toString();
  }

  if (contract.amount === "libor3m") {
    contract.amount = (0, _oracles.getOracleByAddress)(agreedOracleAddress).getLiborSpotRate().toString();
  }

  (0, _deploy.holderAddress)().then(function (holderAddress) {
    (0, _deploy.counterPartyAddress)().then(function (counterPartyAddress) {
      if (contract.recipient == 0) {
        // owner receives
        createMoveFile(counterPartyAddress, holderAddress, parseFloat(contract.amount));
        callTransferFunction(contract, counterPartyAddress, holderAddress);
      } else {
        // counter party receives
        createMoveFile(holderAddress, counterPartyAddress, parseFloat(contract.amount));
        callTransferFunction(contract, holderAddress, counterPartyAddress);
      }

      if (document.getElementById("td_status_" + contract.id).innerHTML !== "successful") {
        document.getElementById("td_status_" + contract.id).innerHTML = "not accepted by user";
      }
    });
  });
}

function callTransferFunction(contract, fromAddress, toAddress) {
  (0, _deploy.balanceOfAddress)(fromAddress).then(function (balance) {
    // do local balance check as contract does not update as quickly
    if (balance >= parseFloat(contract.amount)) {
      (0, _deploy.transfer)(fromAddress, toAddress, parseFloat(contract.amount)).then(function (transferTxHash) {
        (0, _deploy.watchTransferEvent)().then(function (_boolean) {
          var bool = parseInt(_boolean);
          console.log("booooolean: " + bool);

          if (bool === 0) {
            document.getElementById("td_status_" + contract.id).innerHTML = "insufficient funds";

            if (beforeCurrentDate(contract.horizonDate)) {
              document.getElementById("td_status_" + contract.id).innerHTML = "expired";
              deleteFromSuperContracts(contract.id.split(".")[0], contract);
            }
          } else if (bool === 1) {
            document.getElementById("td_status_" + contract.id).innerHTML = "failed: sender address and recipient address are the same";

            if (beforeCurrentDate(contract.horizonDate)) {
              document.getElementById("td_status_" + contract.id).innerHTML = "expired";
              deleteFromSuperContracts(contract.id.split(".")[0], contract);
            }
          } else if (bool === 2) {
            (0, _deploy.waitForReceipt)(transferTxHash).then(function (_) {
              console.log(fromAddress + " has transferred " + contract.amount + " Ether to " + toAddress);
              document.getElementById("td_status_" + contract.id).innerHTML = "successful";
              deleteFromSuperContracts(contract.id.split(".")[0], contract);
              retrieveBalances();
            });
          }
        });
      });
    } else {
      //window.alert("The sender address does not have enough Ether for this transfer. Please deposit more Ether into the account.");
      document.getElementById("td_status_" + contract.id).innerHTML = "insufficient funds";

      if (beforeCurrentDate(contract.horizonDate)) {
        document.getElementById("td_status_" + contract.id).innerHTML = "expired";
        deleteFromSuperContracts(contract.id.split(".")[0], contract);
      }
    }
  });
}

function sleep(ms) {
  var start = new Date().getTime();

  for (var i = 0; i < 1e7; i++) {
    if (new Date().getTime() - start > ms) {
      break;
    }
  }
}

function createMoveFile(sender_address, recipient_address, amount) {
  var textToWrite = "//! no-execute\n" + "import 0x0.LibraAccount;\n" + "import 0x0.LibraCoin;\n \n" + "main(payee: address) {\n" + "\t let coin: R#LibraCoin.T;\n" + "\t let account_exists: bool;\n" + "\t let recipient: address;\n" + "\t let sender: address;\n" + "\t sender = " + sender_address + ";\n" + "\t recipient = " + recipient_address + ";\n" + "\t coin = LibraAccount.withdraw_from_sender(" + amount + ");\n" + "\t account_exists = LibraAccount.exists(copy(recipient));\n" + "\t if (!move(account_exists)) {\n" + "\t \t create_account(copy(recipient));\n" + "\t }\n" + "\t LibraAccount.deposit(move(recipient), move(coin));\n" + "\t return;\n" + "}";
  var textFileAsBlob = new Blob([textToWrite], {
    type: 'text/plain'
  });
  var downloadLink = document.createElement("a");
  downloadLink.download = "script.mvir";
  downloadLink.innerHTML = "Download Move File";

  if (window.webkitURL != null) {
    // Chrome allows the link to be clicked
    // without actually adding it to the DOM.
    downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
  } else {
    // Firefox requires the link to be added to the DOM
    // before it can be clicked.
    downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
    downloadLink.onclick = destroyClickedElement;
    downloadLink.style.display = "none";
    document.body.appendChild(downloadLink);
  } //downloadLink.click(); // commented for testing purposes


  console.log("Created and downloaded .mvir file.");
}

function retrieveBalances() {
  (0, _deploy.holderBalance)().then(function (hBalance) {
    document.getElementById("holder_balance_p").innerHTML = "Balance: " + hBalance + "ETH";
    (0, _deploy.counterPartyBalance)().then(function (cBalance) {
      document.getElementById("counter_party_balance_p").innerHTML = "Balance: " + cBalance + "ETH";
    });
  });
}

function printStack(stack, name) {
  console.log(name + ": " + stack.length);
  var x;

  for (var x = 0; x < stack.length; ++x) {
    console.log(name + " - " + x + ": " + stack[x]);
  }
}

function createTableRow(contract) {
  var table = document.getElementById("my_table");
  var tr = table.insertRow(1);
  tr.className = "standard_row";
  var td;
  tr.appendChild(td = document.createElement("td"));
  td.innerHTML = contract.id;
  tr.appendChild(td = document.createElement("td"));
  td.innerHTML = (0, _stringmanipulation.changeDateFormatBack)(contract.contractString);
  tr.appendChild(td = document.createElement("td"));
  td.innerHTML = (0, _stringmanipulation.changeDateFormatBack)(contract.meaningOfContractString);
  tr.appendChild(td = document.createElement("td"));
  td.innerHTML = (0, _stringmanipulation.changeDateFormatBack)(contract.horizonDate);
  tr.appendChild(td = document.createElement("td"));
  td.innerHTML = contract.toBeExecutedAtHorizon;
  tr.appendChild(td = document.createElement("td"));
  td.id = "td_status_" + contract.id;
  td.innerHTML = contract.status;
  tr.appendChild(td = document.createElement("td"));
}

function correctUserTryingToAcquire() {
  if ((0, _deploy.getSelectedMetaMaskAccount)().toUpperCase() === document.getElementById("holder_address").value.toUpperCase()) {
    return true;
  } else {
    return false;
  }
}

function createButton(contractString, buttonId) {
  var button = document.createElement("button");
  button.id = "choices_button_" + buttonId;
  button.className = "choices_button";
  button.innerHTML = (0, _stringmanipulation.cleanParens)(contractString); // 2. Append somewhere

  var bottomContainer = document.getElementById("button_choices_container");
  bottomContainer.appendChild(button); // 3. Add event handler

  button.addEventListener("click", function () {
    decomposeOrs(stringToAddToBeginning + button.innerHTML);
  });
}

function createSection() {
  var para = document.createElement("p");
  var node = document.createTextNode("Contract choice:");
  para.appendChild(node);
  var bottomContainer = document.getElementById("button_choices_container");
  bottomContainer.appendChild(para);
}

function createOrLabel() {
  var para = document.createElement("p");
  para.className = "p_small";
  var node = document.createTextNode("OR");
  para.appendChild(node);
  var bottomContainer = document.getElementById("button_choices_container");
  bottomContainer.appendChild(para);
}

function removeChildren(containerString) {
  var e = document.getElementById(containerString);
  var child = e.lastElementChild;

  while (child) {
    e.removeChild(child);
    child = e.lastElementChild;
  }
}

function isDate(stringInput) {
  var matches = stringInput.match(/^((0?[1-9])|([12][0-9])|(3[01]))\/((0?[1-9])|(1[0-2]))\/(\d\d\d\d)-((0[0-9])|(1[0-9])|(2[0-3])):([0-5][0-9]):([0-5][0-9])$/);

  if (matches === null) {
    return false;
  } else if (matches[0] === stringInput) {
    return true;
  } else {
    return false;
  }
}

global.testReachability = function () {
  decomposeOrs("( scaleK 50 ( get ( truncate \"24/12/2019-23:33:33\" ( give one ) ) ) ) or ( zero and truncate \"26/12/2019-23:33:33\" ( give zero ) )");
  removeChildren("button_choices_container");
  decomposeOrs("( scaleK 50 ( get ( truncate \"24/12/2019-23:33:33\" ( give one ) ) ) ) or ( zero or truncate \"26/12/2019-23:33:33\" ( give zero ) )");
  removeChildren("button_choices_container");
  decomposeOrs("( scaleK 50 ( get ( truncate \"24/12/2019-23:33:33\" ( give one ) ) ) ) or zero");
  removeChildren("button_choices_container");
  decomposeOrs("zero or give one");
  removeChildren("button_choices_container");
  decomposeOrs("( ( zero or give one ) or scaleK 10 ( one ) ) or zero");
  removeChildren("button_choices_container");
  decomposeOrs("( zero or give one ) or ( scaleK 10 one or zero )");
  removeChildren("button_choices_container");
  decomposeOrs("( zero or one ) or scaleK 10 ( one )");
  removeChildren("button_choices_container");
  decomposeOrs("give one or ( ( truncate \"24/12/2019-23:33:33\" ( give zero ) ) and give zero )");
  removeChildren("button_choices_container");
  decomposeOrs("( zero or give one ) or ( ( scaleK 10 one ) or zero )");
  removeChildren("button_choices_container");
  decomposeOrs("( zero or give one ) or ( ( scaleK 10 ( one ) ) or zero )");
  removeChildren("button_choices_container");
  decomposeOrs("give one or ( ( truncate \"24/12/2019-23:33:33\" ( give zero ) ) or give zero )");
  removeChildren("button_choices_container");
  decomposeOrs("truncate \"24/12/2019-23:33:33\" ( one or give zero )");
  removeChildren("button_choices_container");
  decomposeOrs("truncate \"24/12/2019-23:33:33\" ( one ) or truncate \"24/12/2019-23:33:33\" ( zero )");
  removeChildren("button_choices_container");
  decomposeOrs("( scaleK 101 ( get ( truncate \"24/01/2019-23:33:33\" ( one ) ) ) and scaleK 102 ( get ( truncate \"24/02/2019-23:33:33\" ( give one ) ) ) ) or ( ( scaleK 103 ( get ( truncate \"24/03/2019-23:33:33\" ( one ) ) ) and scaleK 104 ( get ( truncate \"24/04/2019-23:33:33\" ( give one ) ) ) ) or ( scaleK 105 ( get ( truncate \"24/05/2019-23:33:33\" ( one ) ) ) and scaleK 106 ( get ( truncate \"24/06/2019-23:33:33\" ( give one ) ) ) ) )");
  removeChildren("button_choices_container");
  decomposeOrs("( scaleK 100 one and scaleK 101 one ) or ( ( scaleK 102 one and scaleK 103 one ) or ( scaleK 104 one and scaleK 105 one ) )");
  removeChildren("button_choices_container");
  decomposeOrs("( one and give one ) or ( ( zero and give zero ) or ( give one and give zero ) )");
  removeChildren("button_choices_container");
  decomposeOrs("( zero or give one ) or ( scaleK 10 ( one ) or zero )");
  removeChildren("button_choices_container");
};

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./contract.mjs":1,"./deploy/deploy.mjs":2,"./oracles.mjs":5,"./stringmanipulation.mjs":6}],5:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createOracles = createOracles;
exports.getOracleByAddress = getOracleByAddress;
exports.Oracle = void 0;

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * @author Noah-Vincenz Noeh <noah-vincenz.noeh18@imperial.ac.uk>
 */

/* jshint esversion: 6 */
var oracleArr = [];

var Oracle =
/*#__PURE__*/
function () {
  function Oracle(address) {
    _classCallCheck(this, Oracle);

    this.address = address;
  }

  _createClass(Oracle, [{
    key: "getTempInLondon",
    value: function getTempInLondon() {
      switch (this.address) {
        case "0x8ce40d9956e7b8a89a1d73f4d4850c760ea20a56":
          return 23;
          break;

        case "0xc90bc8ff4387fe14cdd0934ef9935be590cb83ca":
          return 25;
          break;

        case "0xa03cbbea9891d7961ed23fd965b6ad3109c36a30":
          return 22;
          break;

        case "0x90a3coyea9891d7961edo78h96b6ad3109c3659b":
          return 24;
          break;

        case "0xa89fbjs0033nkkklizqp04bj4jb5bjxxk4nb33n4":
          return 22;
          break;

        default: // code block

      }
    }
  }, {
    key: "getLiborSpotRate",
    value: function getLiborSpotRate() {
      switch (this.address) {
        case "0x8ce40d9956e7b8a89a1d73f4d4850c760ea20a56":
          return 2.26563;
          break;

        case "0xc90bc8ff4387fe14cdd0934ef9935be590cb83ca":
          return 2.25634;
          break;

        case "0xa03cbbea9891d7961ed23fd965b6ad3109c36a30":
          return 2.26551;
          break;

        case "0x90a3coyea9891d7961edo78h96b6ad3109c3659b":
          return 2.25555;
          break;

        case "0xa89fbjs0033nkkklizqp04bj4jb5bjxxk4nb33n4":
          return 2.25420;
          break;

        default: // code block

      }
    }
  }]);

  return Oracle;
}();

exports.Oracle = Oracle;

function createOracles() {
  var o1 = new Oracle("0x8ce40d9956e7b8a89a1d73f4d4850c760ea20a56");
  var o2 = new Oracle("0xc90bc8ff4387fe14cdd0934ef9935be590cb83ca");
  var o3 = new Oracle("0xa03cbbea9891d7961ed23fd965b6ad3109c36a30");
  var o4 = new Oracle("0x90a3coyea9891d7961edo78h96b6ad3109c3659b");
  var o5 = new Oracle("0xa89fbjs0033nkkklizqp04bj4jb5bjxxk4nb33n4");
  oracleArr = [o1, o2, o3, o4, o5];
}

function getOracleByAddress(address) {
  for (var i = 0; i < oracleArr.length; ++i) {
    if (oracleArr[i].address === address) {
      return oracleArr[i];
    }
  }
}

},{}],6:[function(require,module,exports){
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanParens = cleanParens;
exports.changeDateFormat = changeDateFormat;
exports.changeDateFormatBack = changeDateFormatBack;
exports.addSpacing = addSpacing;
exports.addParens = addParens;
exports.openingParensAmount = openingParensAmount;
exports.closingParensAmount = closingParensAmount;
exports.lTrimWhiteSpace = lTrimWhiteSpace;
exports.rTrimWhiteSpace = rTrimWhiteSpace;
exports.lTrimParen = lTrimParen;
exports.rTrimParen = rTrimParen;
exports.lTrimBrace = lTrimBrace;
exports.rTrimBrace = rTrimBrace;
exports.lTrimDoubleQuotes = lTrimDoubleQuotes;
exports.rTrimDoubleQuotes = rTrimDoubleQuotes;
exports.trimSemiColon = trimSemiColon;

/**
 * @author Noah-Vincenz Noeh <noah-vincenz.noeh18@imperial.ac.uk>
 */

/* jshint esversion: 6 */
function cleanParens(contractString) {
  if (contractString[contractString.length - 1] === "(") {
    contractString = contractString.slice(0, -1);
  }

  if (contractString[0] === ")") {
    contractString = contractString.substring(1);
  }

  var contractStringArr = contractString.split(" ");

  while (openingParensAmount(contractString) > closingParensAmount(contractString) && (contractStringArr[0] === "(" || contractStringArr[0] === " " && contractStringArr[1] === "(")) {
    contractString = lTrimParen(lTrimWhiteSpace(contractString));
  }

  while (openingParensAmount(contractString) < closingParensAmount(contractString) && (contractStringArr[contractStringArr.length - 1] === ")" || contractStringArr[contractStringArr.length - 1] === " " && contractStringArr[contractStringArr.length - 2] === ")")) {
    contractString = rTrimParen(rTrimWhiteSpace(contractString));
  }

  return contractString;
}

function changeDateFormat(string) {
  var regex = /(.*)(\d\d\d\d)\s(\d\d)(.*)/;
  var matchObj = regex.exec(string);

  while (matchObj !== null) {
    string = matchObj[1] + matchObj[2] + "-" + matchObj[3] + matchObj[4];
    matchObj = regex.exec(string);
  }

  return string;
}

function changeDateFormatBack(string) {
  var regex = /(.*)(\d\d\d\d)-(\d\d)(.*)/;
  var matchObj = regex.exec(string);

  while (matchObj !== null) {
    string = matchObj[1] + matchObj[2] + " " + matchObj[3] + matchObj[4];
    matchObj = regex.exec(string);
  }

  return string;
}

function addSpacing(string) {
  // paren spacing
  var regex1 = /(.*\S)(\()(.*)/;
  var matchObj = regex1.exec(string);

  while (matchObj !== null) {
    string = matchObj[1] + " " + matchObj[2] + matchObj[3];
    matchObj = regex1.exec(string);
  }

  var regex2 = /(.*\S)(\))(.*)/;
  matchObj = regex2.exec(string);

  while (matchObj !== null) {
    string = matchObj[1] + " " + matchObj[2] + matchObj[3];
    matchObj = regex2.exec(string);
  }

  var regex3 = /(.*)(\()(\S.*)/;
  matchObj = regex3.exec(string);

  while (matchObj !== null) {
    string = matchObj[1] + matchObj[2] + " " + matchObj[3];
    matchObj = regex3.exec(string);
  }

  var regex4 = /(.*)(\))(\S.*)/;
  matchObj = regex4.exec(string);

  while (matchObj !== null) {
    string = matchObj[1] + matchObj[2] + " " + matchObj[3];
    matchObj = regex4.exec(string);
  } // braces spacing


  var regex5 = /(.*\S)({)([^<>=].*)/;
  var matchObj = regex5.exec(string);

  while (matchObj !== null) {
    string = matchObj[1] + " " + matchObj[2] + matchObj[3];
    matchObj = regex5.exec(string);
  }

  var regex6 = /(.*\S[^<>=\S])(})(.*)/;
  matchObj = regex6.exec(string);

  while (matchObj !== null) {
    string = matchObj[1] + " " + matchObj[2] + matchObj[3];
    matchObj = regex6.exec(string);
  }

  var regex7 = /(.*)({)([^<>=\S]\S.*)/;
  matchObj = regex7.exec(string);

  while (matchObj !== null) {
    string = matchObj[1] + matchObj[2] + " " + matchObj[3];
    matchObj = regex7.exec(string);
  }

  var regex8 = /(.*[^<>=])(})(\S.*)/;
  matchObj = regex8.exec(string);

  while (matchObj !== null) {
    string = matchObj[1] + matchObj[2] + " " + matchObj[3];
    matchObj = regex8.exec(string);
  }

  return string;
}

function addParens(contractString) {
  if (openingParensAmount(contractString) > closingParensAmount(contractString)) {
    contractString = contractString + " )";
  } else if (openingParensAmount(contractString) < closingParensAmount(contractString)) {
    contractString = "( " + contractString;
  }

  return contractString;
}

function openingParensAmount(string) {
  return string.split("(").length - 1;
}

function closingParensAmount(string) {
  return string.split(")").length - 1;
}

function lTrimWhiteSpace(str) {
  if (str == null) return str;
  return str.replace(/^\s+/g, '');
}

function rTrimWhiteSpace(str) {
  if (str == null) return str;
  return str.replace(/\s$/g, '');
}

function lTrimParen(str) {
  if (str == null) return str;
  return str.replace(/^\(+/g, '');
}

function rTrimParen(str) {
  if (str == null) return str;
  return str.replace(/\)$/g, '');
}

function lTrimBrace(str) {
  if (str == null) return str;
  return str.replace(/^\{+/g, '');
}

function rTrimBrace(str) {
  if (str == null) return str;
  return str.replace(/\}$/g, '');
}

function lTrimDoubleQuotes(str) {
  if (str == null) return str;
  return str.replace(/^\"+/g, '');
}

function rTrimDoubleQuotes(str) {
  if (str == null) return str;
  return str.replace(/\"$/g, '');
}

function trimSemiColon(str) {
  if (str == null) return str;
  return str.replace(/;/g, '');
}

},{}]},{},[4]);
